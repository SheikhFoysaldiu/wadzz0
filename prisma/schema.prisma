// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ------------------------Generic SCHEMA-------------------------

model Tag {
    name          String          @id
    AdminAssetTag AdminAssetTag[]
}

enum MediaType {
    MUSIC
    VIDEO
    IMAGE
}

// ------------------------NOTIFICATION SCHEMA-------------------------

enum NotificationType {
    LIKE
    COMMENT
    SUBSCRIPTION
    POST
    SHOP_ASSET
}

// it is kinda notification actor and the entity that is being acted upon
model NotificationObject {
    id         Int              @id @default(autoincrement())
    entityType NotificationType
    entityId   Int

    createdAt DateTime @default(now())

    Notification Notification[]

    actorId String
    isUser  Boolean @default(true)
}

// it is the entity that is for who the notification is for
model Notification {
    id Int @id @default(autoincrement())

    nofitifactionObjectId Int
    notificationObject    NotificationObject @relation(fields: [nofitifactionObjectId], references: [id])

    seen      DateTime?
    createdAt DateTime  @default(now())

    notifierId String
    isCreator  Boolean @default(true) // is for creator
}

// ------------------------FAN SCHEMA-------------------------
model Subscription {
    id        Int     @id @default(autoincrement())
    priority  Int
    name      String  @default("Platinum")
    creatorId String
    creator   Creator @relation(fields: [creatorId], references: [id])

    code          String
    issuer        String
    issuerPrivate String?
    escrow        Boolean @default(false)

    days     Int
    features String
    Post     Post[]

    price           Float               @default(1000)
    subscribedUsers User_Subscription[]

    // Unique constraint on userId and subscriptionId
    @@unique([creatorId, priority])
}

model Like {
    id        Int      @id @default(autoincrement())
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    status Boolean @default(true)

    @@unique([postId, userId])
}

model Comment {
    id              Int    @id @default(autoincrement())
    parentCommentID Int?
    postId          Int
    post            Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    content         String

    parentComment Comment? @relation("ParentComment", fields: [parentCommentID], references: [id])
    createdAt     DateTime @default(now())

    commentId Int?
    Comment   Comment[] @relation("ParentComment")
}

model User_Asset {
    id     Int    @id @default(autoincrement())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    assetId Int
    asset   Asset @relation(fields: [assetId], references: [id], onDelete: NoAction)

    buyAt DateTime @default(now())
}

model User_Subscription {
    id                 Int          @id @default(autoincrement())
    userId             String
    user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    subscriptionId     Int
    subscription       Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
    subcribedAt        DateTime     @default(now())
    subcriptionEndDate DateTime

    // Unique constraint on userId and subscriptionId
    @@unique([userId, subscriptionId])
}

model Media {
    id   Int       @id @default(autoincrement())
    url  String
    type MediaType

    postId Int
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Creator {
    id         String   @id
    joinedAt   DateTime @default(now())
    profileUrl String?
    coverUrl   String?
    bio        String?
    name       String

    storagePub    String
    storageSecret String

    user          User           @relation(fields: [id], references: [id], onDelete: Cascade)
    posts         Post[]
    subscriptions Subscription[]
    assets        Asset[]
    marketAssets  MarketAsset[]

    @@index([bio, name])
}

model Post {
    id Int @id @default(autoincrement())

    content String
    heading String @default("Heading")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   Creator @relation(fields: [creatorId], references: [id])
    creatorId String

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId Int?
    likes          Like[]
    comments       Comment[]
    medias         Media[]

    @@index([heading])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    bio           String?
    image         String?
    emailVerified DateTime?

    accounts      Account[]
    sessions      Session[]
    creator       Creator?
    subscriptions User_Subscription[]
    likes         Like[]
    comments      Comment[]
    assets        User_Asset[]
    Admin         Admin[]
    songs         User_Song[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------------MUSIC SCHEMA-------------------------

model Album {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    coverImgUrl String

    createdAt DateTime @default(now())
    Song      Song[]
}

model Song {
    id Int @id @default(autoincrement())

    artist String

    assetId Int   @unique
    asset   Asset @relation(fields: [assetId], references: [id])

    albumId Int
    album   Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

    User_Song User_Song[]
}

model User_Song {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    songId Int
    song   Song @relation(fields: [songId], references: [id], onDelete: Cascade)

    @@id([userId, songId])
}

enum ItemPrivacy {
    DRAFT
    FOR_SALE // for sell
    NOT_FOR_SALE // for public
}

// ------------------------Marketplace SCHEMA-------------------------

model Asset {
    id          Int     @id @default(autoincrement())
    name        String
    description String?

    code          String
    issuer        String
    issuerPrivate String?
    price         Float
    limit         Int

    mediaType MediaType
    mediaUrl  String
    thumbnail String

    privacy ItemPrivacy @default(FOR_SALE)

    creatorId String? // if null then it is admin asset
    creator   Creator? @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    Song        Song?
    buyers      User_Asset[]
    MarketAsset MarketAsset[]

    @@unique([code, issuer])
    @@index([name, description])
}

model MarketAsset {
    id Int @id @default(autoincrement())

    limit Int
    price Float?

    assetId Int
    asset   Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

    placedAt DateTime @default(now())

    creatorId String
    creator   Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@unique([assetId, creatorId])
}

// ------------------------Wallete SCHEMA-------------------------

model AdminAsset {
    id Int @id @default(autoincrement())

    description String
    link        String
    codeIssuer  String
    code        String

    logoUrl      String
    logoBlueData String?
    color        String

    // market links
    StellarTerm String?
    StellarX    String?
    Litemint    String?

    adminId String
    admin   Admin  @relation(fields: [adminId], references: [id], onDelete: NoAction)

    tags AdminAssetTag[]
}

model AdminAssetTag {
    id Int @id @default(autoincrement())

    tagName String
    tag     Tag    @relation(fields: [tagName], references: [name], onDelete: Cascade)

    adminAssetId Int
    addminAsset  AdminAsset @relation(fields: [adminAssetId], references: [id], onDelete: Cascade)
}

model Admin {
    id       String   @id
    joinedAt DateTime @default(now())

    profileUrl String?
    coverUrl   String?
    bio        String?
    name       String?

    user       User         @relation(fields: [id], references: [id], onDelete: Cascade)
    AdminAsset AdminAsset[]
}
