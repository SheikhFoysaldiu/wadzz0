// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Asset {
    id           Int            @id @default(autoincrement())
    code         String
    issuer       String
    subscription Subscription[]
}

model Subscription {
    id                Int                 @id @default(autoincrement())
    priority          Int
    name              String              @default("Platinum")
    creatorId         String
    creator           Creator             @relation(fields: [creatorId], references: [id])
    assetId           Int
    asset             Asset               @relation(fields: [assetId], references: [id], onDelete: NoAction)
    days              Int
    features          String
    Post              Post[]
    User_Subscription User_Subscription[]

    // Script-based default expression for priority

    // Unique constraint on userId and subscriptionId
    @@unique([creatorId, priority])
}

model Like {
    id        Int      @id @default(autoincrement())
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([postId, userId])
}

model Comment {
    id              Int    @id @default(autoincrement())
    parentCommentID Int?
    postId          Int
    post            Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    content         String

    parentComment Comment? @relation("ParentComment", fields: [parentCommentID], references: [id])
    createdAt     DateTime @default(now())

    commentId Int?
    Comment   Comment[] @relation("ParentComment")
}

model User_Subscription {
    id             Int          @id @default(autoincrement())
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    subscriptionId Int
    subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    // Unique constraint on userId and subscriptionId
    @@unique([userId, subscriptionId])
}

model Creator {
    id            String         @id
    joinedAt      DateTime       @default(now())
    profileUrl    String?
    coverUrl      String?
    bio           String?
    name          String
    user          User           @relation(fields: [id], references: [id], onDelete: Cascade)
    posts         Post[]
    subscriptions Subscription[]
}

enum MediaType {
    MUSIC
    VIDEO
    IMAGE
}

model Post {
    id Int @id @default(autoincrement())

    content String
    heading String @default("Heading")

    mediaType MediaType?
    mediaUrl  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   Creator @relation(fields: [creatorId], references: [id])
    creatorId String

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId Int?
    Like           Like[]
    Comment        Comment[]

    @@index([content])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    creator           Creator?
    User_Subscription User_Subscription[]
    Like              Like[]
    Comment           Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
