// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ------------------------Generic SCHEMA-------------------------

model Tag {
    id            Int             @id @default(autoincrement())
    name          String
    AdminAssetTag AdminAssetTag[]
}

model Asset {
    id   Int    @id @default(autoincrement())
    code String

    issuer        String
    issuerPrivate String?

    escrow Boolean @default(false)

    // different type of asset.
    subscription Subscription[]
    ShopAsset    ShopAsset[]
    Song         Song[]
    AdminAsset   AdminAsset[]

    @@index([code, issuer])
}

enum MediaType {
    MUSIC
    VIDEO
    IMAGE
}

// ------------------------NOTIFICATION SCHEMA-------------------------

enum NotificationType {
    LIKE
    COMMENT
    SUBSCRIPTION
    POST
    SHOP_ASSET
}

// it is kinda notification actor and the entity that is being acted upon
model NotificationObject {
    id         Int              @id @default(autoincrement())
    entityType NotificationType
    entityId   Int

    createdAt DateTime @default(now())

    Notification Notification[]

    actorId String
    isUser  Boolean @default(true)
}

// it is the entity that is for who the notification is for
model Notification {
    id Int @id @default(autoincrement())

    nofitifactionObjectId Int
    notificationObject    NotificationObject @relation(fields: [nofitifactionObjectId], references: [id])

    seen      DateTime?
    createdAt DateTime  @default(now())

    notifierId String
    isCreator  Boolean @default(true) // is for creator
}

// ------------------------FAN SCHEMA-------------------------
model Subscription {
    id        Int     @id @default(autoincrement())
    priority  Int
    name      String  @default("Platinum")
    creatorId String
    creator   Creator @relation(fields: [creatorId], references: [id])
    assetId   Int
    asset     Asset   @relation(fields: [assetId], references: [id], onDelete: NoAction)
    days      Int
    features  String
    Post      Post[]

    price             Float               @default(1000)
    User_Subscription User_Subscription[]

    // Unique constraint on userId and subscriptionId
    @@unique([creatorId, priority])
}

model Like {
    id        Int      @id @default(autoincrement())
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    status Boolean @default(true)

    @@unique([postId, userId])
}

model Comment {
    id              Int    @id @default(autoincrement())
    parentCommentID Int?
    postId          Int
    post            Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    content         String

    parentComment Comment? @relation("ParentComment", fields: [parentCommentID], references: [id])
    createdAt     DateTime @default(now())

    commentId Int?
    Comment   Comment[] @relation("ParentComment")
}

model UserShopAsset {
    id     Int    @id @default(autoincrement())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    shopAssetId Int
    shopAsset   ShopAsset @relation(fields: [shopAssetId], references: [id], onDelete: NoAction)

    createdAt DateTime @default(now())
}

model User_Subscription {
    id             Int          @id @default(autoincrement())
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    subscriptionId Int
    subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    endDate        DateTime

    // Unique constraint on userId and subscriptionId
    @@unique([userId, subscriptionId])
}

model Media {
    id   Int       @id @default(autoincrement())
    url  String
    type MediaType

    postId Int
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Creator {
    id            String         @id
    joinedAt      DateTime       @default(now())
    profileUrl    String?
    coverUrl      String?
    bio           String?
    name          String
    user          User           @relation(fields: [id], references: [id], onDelete: Cascade)
    posts         Post[]
    subscriptions Subscription[]
    ShopAsset     ShopAsset[]

    @@index([bio, name])
}

model Post {
    id Int @id @default(autoincrement())

    content String
    heading String @default("Heading")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   Creator @relation(fields: [creatorId], references: [id])
    creatorId String

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId Int?
    Like           Like[]
    Comment        Comment[]
    Media          Media[]

    @@index([heading])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    bio           String?
    image         String?
    emailVerified DateTime?

    accounts          Account[]
    sessions          Session[]
    creator           Creator?
    User_Subscription User_Subscription[]
    Like              Like[]
    Comment           Comment[]
    UserShopAsset     UserShopAsset[]
    Admin             Admin[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------------MUSIC SCHEMA-------------------------

model Album {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    coverImgUrl String

    createdAt DateTime @default(now())
    Song      Song[]
}

model Song {
    id           Int      @id @default(autoincrement())
    serialNumber Int
    name         String
    artist       String
    coverImgUrl  String
    musicUrl     String
    duration     String
    createdAt    DateTime @default(now())

    assetId Int
    asset   Asset @relation(fields: [assetId], references: [id], onDelete: NoAction)

    albumId Int
    album   Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

enum ItemPrivacy {
    DRAFT
    FOR_SALE // for sell
    NOT_FOR_SALE // for public
}

// ------------------------Marketplace SCHEMA-------------------------

model ShopAsset {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    price       Float
    mediaUrl    String?
    thumbnail   String?

    assetId Int
    asset   Asset @relation(fields: [assetId], references: [id], onDelete: NoAction)

    creatorId     String
    creator       Creator         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    UserShopAsset UserShopAsset[]

    @@index([name, description])
}

// ------------------------Wallete SCHEMA-------------------------

model AdminAsset {
    id Int @id @default(autoincrement())

    assetId Int
    asset   Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

    description String
    link        String
    codeIssuer  String

    logoUrl      String
    logoBlueData String?
    color        String

    adminId String
    admin   Admin  @relation(fields: [adminId], references: [id], onDelete: NoAction)

    AdminAssetTag AdminAssetTag[]
}

model Market {
    id       Int     @id @default(autoincrement())
    title    String
    link     String
    logoUrl  String?
    blueData String?
    color    String?
}

model AdminAssetTag {
    id Int @id @default(autoincrement())

    tagId Int
    tag   Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

    adminAssetId Int
    addminAsset  AdminAsset @relation(fields: [adminAssetId], references: [id], onDelete: Cascade)
}

model Admin {
    id       String   @id
    joinedAt DateTime @default(now())

    profileUrl String?
    coverUrl   String?
    bio        String?
    name       String?

    user       User         @relation(fields: [id], references: [id], onDelete: Cascade)
    AdminAsset AdminAsset[]
}
